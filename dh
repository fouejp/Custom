-- LinoriaLib Setup
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

-- UI Setup
local Window = Library:CreateWindow({
    Title = 'Scripthub',
    Center = true,
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'),
}

local CamlockBox = Tabs.Main:AddLeftGroupbox('Camlock')
local FlyBox = Tabs.Main:AddRightGroupbox('Fly')

-- Services & Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Camlock Vars
local CamlockEnabled = false
local LockedTarget = nil
local Prediction = 0.123
local Smoothness = 1

-- Fly Vars
local CanFly = false
local IsFlying = false
local FlySpeed = 50

-- UI Flags
CamlockBox:AddToggle('EnableCamlock', {
    Text = 'Camlock',
    Default = false,
    Callback = function(v)
        CamlockEnabled = v
        if not v then LockedTarget = nil end
    end
})

CamlockBox:AddInput('PredictionInput', {
    Text = 'Prediction',
    Default = tostring(Prediction),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        Prediction = tonumber(val) or 0.123
    end
})

CamlockBox:AddInput('SmoothnessInput', {
    Text = 'Smoothness',
    Default = tostring(Smoothness),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        Smoothness = tonumber(val) or 1
    end
})

FlyBox:AddToggle('AllowFly', {
    Text = 'Fly (Z toggle)',
    Default = false,
    Callback = function(v)
        CanFly = v
        if not v and IsFlying then
            IsFlying = false
            Library:Notify('Fly forcibly disabled')
        end
    end
})

FlyBox:AddInput('FlySpeedInput', {
    Text = 'Fly Speed',
    Default = tostring(FlySpeed),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        FlySpeed = tonumber(val) or 50
    end
})

-- Camlock Behavior
RunService.RenderStepped:Connect(function()
    if CamlockEnabled and LockedTarget and LockedTarget.Character and LockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local targetPos = LockedTarget.Character.HumanoidRootPart.Position + (LockedTarget.Character.HumanoidRootPart.Velocity * Prediction)
        local direction = (targetPos - Camera.CFrame.Position).Unit
        Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction), 1 / Smoothness)
    end
end)

-- Fly Movement (natural + smooth + animated)
RunService.RenderStepped:Connect(function()
    if IsFlying and CanFly then
        local char = LocalPlayer.Character
        if not char or not char:FindFirstChild("HumanoidRootPart") then return end
        local hrp = char.HumanoidRootPart

        local camCF = workspace.CurrentCamera.CFrame
        local direction = Vector3.zero

        if UserInputService:IsKeyDown(Enum.KeyCode.W) then direction += camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then direction -= camCF.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then direction -= camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then direction += camCF.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then direction += Vector3.new(0, 1, 0) end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then direction -= Vector3.new(0, 1, 0) end

        if direction.Magnitude > 0 then
            direction = direction.Unit
            hrp.Velocity = hrp.Velocity:Lerp(direction * FlySpeed, 0.25)
        else
            hrp.Velocity = hrp.Velocity:Lerp(Vector3.zero, 0.25)
        end

        -- Keep animations working
        local hum = char:FindFirstChildOfClass("Humanoid")
        if hum then hum.PlatformStand = false end

        -- Void protection
        if hrp.Position.Y < -100 then
            IsFlying = false
            Library:Notify("Fly auto-disabled: void detected")
        end
    end
end)

-- Input Controls
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end

    if input.KeyCode == Enum.KeyCode.Q and CamlockEnabled then
        if LockedTarget then
            LockedTarget = nil
            Library:Notify('Camlock Unlocked')
        else
            local closest = nil
            local shortest = math.huge
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local screenPoint, onScreen = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                    local mousePos = Vector2.new(Mouse.X, Mouse.Y)
                    local dist = (Vector2.new(screenPoint.X, screenPoint.Y) - mousePos).Magnitude
                    if dist < shortest and onScreen then
                        shortest = dist
                        closest = player
                    end
                end
            end
            LockedTarget = closest
            if LockedTarget then
                Library:Notify('Locked onto: ' .. LockedTarget.Name)
            end
        end
    end

    if input.KeyCode == Enum.KeyCode.Z and CanFly then
        IsFlying = not IsFlying
        if IsFlying then
            Library:Notify('Fly Enabled')
        else
            local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if hrp then hrp.Velocity = Vector3.zero end
            Library:Notify('Fly Disabled')
        end
    end
end)

-- Theme & Save
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:BuildConfigSection(Tabs.Main)
ThemeManager:ApplyToTab(Tabs.Main)
