-- LinoriaLib Setup
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

-- UI Setup
local Window = Library:CreateWindow({
    Title = 'Scripthub',
    Center = true,
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'),
}

local CamlockBox = Tabs.Main:AddLeftGroupbox('Camlock')
local FlyBox = Tabs.Main:AddRightGroupbox('Fly')

-- Services & Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Camlock Vars
local CamlockEnabled = false
local LockedTarget = nil
local Prediction = 0.123
local Smoothness = 1

-- Fly Vars
local IsFlying = false
local CanFly = false
local FlySpeed = 50
local Movement = {
    W = false,
    A = false,
    S = false,
    D = false,
    Up = false,
    Down = false
}

-- UI Toggles
CamlockBox:AddToggle('EnableCamlock', {
    Text = 'Camlock',
    Default = false,
    Callback = function(v)
        CamlockEnabled = v
        if not v then LockedTarget = nil end
    end
})

CamlockBox:AddInput('PredictionInput', {
    Text = 'Prediction',
    Default = tostring(Prediction),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        Prediction = tonumber(val) or 0.123
    end
})

CamlockBox:AddInput('SmoothnessInput', {
    Text = 'Smoothness',
    Default = tostring(Smoothness),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        Smoothness = tonumber(val) or 1
    end
})

FlyBox:AddToggle('AllowFly', {
    Text = 'Fly (Z toggle)',
    Default = false,
    Callback = function(v)
        CanFly = v
        if not v and IsFlying then
            IsFlying = false
            local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if hum then hum.PlatformStand = false end
            Library:Notify('Fly forcibly disabled')
        end
    end
})

-- Camlock Function
RunService.RenderStepped:Connect(function()
    if CamlockEnabled and LockedTarget and LockedTarget.Character and LockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local targetPos = LockedTarget.Character.HumanoidRootPart.Position + (LockedTarget.Character.HumanoidRootPart.Velocity * Prediction)
        local direction = (targetPos - Camera.CFrame.Position).Unit
        Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction), 1 / Smoothness)
    end
end)

-- Fly Movement
RunService.RenderStepped:Connect(function()
    if IsFlying and CanFly and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = LocalPlayer.Character.HumanoidRootPart
        local camCF = Camera.CFrame
        local moveDirection = Vector3.zero

        if Movement.W then moveDirection = moveDirection + camCF.LookVector end
        if Movement.S then moveDirection = moveDirection - camCF.LookVector end
        if Movement.A then moveDirection = moveDirection - camCF.RightVector end
        if Movement.D then moveDirection = moveDirection + camCF.RightVector end
        if Movement.Up then moveDirection = moveDirection + Vector3.new(0, 1, 0) end
        if Movement.Down then moveDirection = moveDirection - Vector3.new(0, 1, 0) end

        moveDirection = moveDirection.Unit * FlySpeed
        if moveDirection.Magnitude > 0 then
            hrp.Velocity = moveDirection
        else
            hrp.Velocity = Vector3.zero
        end

        if hrp.Position.Y < -25 then
            IsFlying = false
            hrp.CFrame = CFrame.new(0, 50, 0)
            local hum = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if hum then hum.PlatformStand = false end
            Library:Notify("Fly disabled: void protection")
        end
    end
end)

-- Input
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end

    -- Fly toggle
    if input.KeyCode == Enum.KeyCode.Z and CanFly then
        IsFlying = not IsFlying
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then hum.PlatformStand = IsFlying end
        Library:Notify(IsFlying and "Fly Enabled" or "Fly Disabled")
    end

    -- Camlock
    if input.KeyCode == Enum.KeyCode.Q and CamlockEnabled then
        if LockedTarget then
            LockedTarget = nil
            Library:Notify("Camlock Unlocked")
        else
            local closest, shortest = nil, math.huge
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local screenPoint, onScreen = Camera:WorldToScreenPoint(player.Character.HumanoidRootPart.Position)
                    local dist = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
                    if dist < shortest and onScreen then
                        shortest = dist
                        closest = player
                    end
                end
            end
            LockedTarget = closest
            if LockedTarget then
                Library:Notify("Locked onto: " .. LockedTarget.Name)
            end
        end
    end

    -- Fly movement keys
    if input.KeyCode == Enum.KeyCode.W then Movement.W = true end
    if input.KeyCode == Enum.KeyCode.A then Movement.A = true end
    if input.KeyCode == Enum.KeyCode.S then Movement.S = true end
    if input.KeyCode == Enum.KeyCode.D then Movement.D = true end
    if input.KeyCode == Enum.KeyCode.Space then Movement.Up = true end
    if input.KeyCode == Enum.KeyCode.LeftControl then Movement.Down = true end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then Movement.W = false end
    if input.KeyCode == Enum.KeyCode.A then Movement.A = false end
    if input.KeyCode == Enum.KeyCode.S then Movement.S = false end
    if input.KeyCode == Enum.KeyCode.D then Movement.D = false end
    if input.KeyCode == Enum.KeyCode.Space then Movement.Up = false end
    if input.KeyCode == Enum.KeyCode.LeftControl then Movement.Down = false end
end)

-- Theme & Save
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:BuildConfigSection(Tabs.Main)
ThemeManager:ApplyToTab(Tabs.Main)
