-- LinoriaLib Setup
-- Instead of dynamic loadstring, assume you paste full content of Library.lua, ThemeManager.lua, SaveManager.lua here.
-- For simplicity, this example still uses loadstring but it's recommended to inline these when obfuscating with MoonSec

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

-- UI Setup
local Window = Library:CreateWindow({
    Title = 'Scripthub',
    Center = true,
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'),
}

local CamlockBox = Tabs.Main:AddLeftGroupbox('Camlock')
local FlyBox = Tabs.Main:AddRightGroupbox('Fly')

-- Services & Variables
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()

-- Camlock Vars
local CamlockEnabled = false
local LockedTarget = nil
local Prediction = 0.123
local Smoothness = 1

-- Fly Vars
local CanFly = false
local IsFlying = false
local FlyVelocity = nil
local Speed = 50

-- Movement Variables
local MoveDirection = Vector3.zero
local FlyUp = false
local FlyDown = false

-- UI Flags
CamlockBox:AddToggle('EnableCamlock', {
    Text = 'Camlock',
    Default = false,
    Callback = function(v)
        CamlockEnabled = v
        if not v then LockedTarget = nil end
    end
})

CamlockBox:AddInput('PredictionInput', {
    Text = 'Prediction',
    Default = tostring(Prediction),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        Prediction = tonumber(val) or 0.123
    end
})

CamlockBox:AddInput('SmoothnessInput', {
    Text = 'Smoothness',
    Default = tostring(Smoothness),
    Numeric = true,
    Finished = true,
    Callback = function(val)
        Smoothness = tonumber(val) or 1
    end
})

FlyBox:AddToggle('AllowFly', {
    Text = 'Fly (Z toggle)',
    Default = false,
    Callback = function(v)
        CanFly = v
        if not v and IsFlying then
            IsFlying = false
            if FlyVelocity then FlyVelocity:Destroy() FlyVelocity = nil end
            Library:Notify('Fly forcibly disabled')
        end
    end
})

-- Camlock Behavior
RunService.RenderStepped:Connect(function()
    if CamlockEnabled and LockedTarget and LockedTarget.Character and LockedTarget.Character:FindFirstChild("HumanoidRootPart") then
        local targetPos = LockedTarget.Character.HumanoidRootPart.Position + (LockedTarget.Character.HumanoidRootPart.Velocity * Prediction)
        local direction = (targetPos - Camera.CFrame.Position).Unit
        Camera.CFrame = Camera.CFrame:Lerp(CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + direction), 1 / Smoothness)
    end
end)

-- Fly Movement (Void Clamp)
RunService.Heartbeat:Connect(function()
    if IsFlying and CanFly and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local hrp = LocalPlayer.Character.HumanoidRootPart

        if not FlyVelocity then
            FlyVelocity = Instance.new("BodyVelocity")
            FlyVelocity.MaxForce = Vector3.new(1e6, 1e6, 1e6)
            FlyVelocity.P = 10000
            FlyVelocity.Parent = hrp
        end

        -- Get direction based on camera
        local camCF = workspace.CurrentCamera.CFrame
        local moveDir = camCF:VectorToWorldSpace(MoveDirection).Unit
        local vertical = (FlyUp and 1 or 0) - (FlyDown and 1 or 0)
        local finalVelocity = (moveDir * Speed) + Vector3.new(0, vertical * Speed, 0)
        FlyVelocity.Velocity = finalVelocity

        -- Auto disable if void fall
        if hrp.Position.Y < -100 then
            IsFlying = false
            FlyVelocity:Destroy()
            FlyVelocity = nil
            Library:Notify("Fly auto-disabled (Void Fall)")
        end
    elseif FlyVelocity then
        FlyVelocity:Destroy()
        FlyVelocity = nil
    end
end)

-- Key Input Tracking for Movement
UserInputService.InputBegan:Connect(function(input, gpe)
    if gpe then return end

    -- Fly Toggle
    if input.KeyCode == Enum.KeyCode.Z and CanFly then
        IsFlying = not IsFlying
        Library:Notify(IsFlying and "Fly Enabled" or "Fly Disabled")
    end

    -- Camlock Toggle
    if input.KeyCode == Enum.KeyCode.Q and CamlockEnabled then
        if LockedTarget then
            LockedTarget = nil
            Library:Notify("Camlock Unlocked")
        else
            local closest, shortest = nil, math.huge
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local hrp = player.Character.HumanoidRootPart
                    local screenPos, onScreen = Camera:WorldToScreenPoint(hrp.Position)
                    if onScreen then
                        local mousePos = Vector2.new(Mouse.X, Mouse.Y)
                        local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                        if dist < shortest then
                            shortest = dist
                            closest = player
                        end
                    end
                end
            end
            LockedTarget = closest
            if LockedTarget then
                Library:Notify("Locked onto: " .. LockedTarget.Name)
            end
        end
    end

    -- Movement
    if input.KeyCode == Enum.KeyCode.W then MoveDirection += Vector3.new(0, 0, -1) end
    if input.KeyCode == Enum.KeyCode.S then MoveDirection += Vector3.new(0, 0, 1) end
    if input.KeyCode == Enum.KeyCode.A then MoveDirection += Vector3.new(-1, 0, 0) end
    if input.KeyCode == Enum.KeyCode.D then MoveDirection += Vector3.new(1, 0, 0) end
    if input.KeyCode == Enum.KeyCode.Space then FlyUp = true end
    if input.KeyCode == Enum.KeyCode.LeftControl then FlyDown = true end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.W then MoveDirection -= Vector3.new(0, 0, -1) end
    if input.KeyCode == Enum.KeyCode.S then MoveDirection -= Vector3.new(0, 0, 1) end
    if input.KeyCode == Enum.KeyCode.A then MoveDirection -= Vector3.new(-1, 0, 0) end
    if input.KeyCode == Enum.KeyCode.D then MoveDirection -= Vector3.new(1, 0, 0) end
    if input.KeyCode == Enum.KeyCode.Space then FlyUp = false end
    if input.KeyCode == Enum.KeyCode.LeftControl then FlyDown = false end
end)

-- Theme & Save
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:BuildConfigSection(Tabs.Main)
ThemeManager:ApplyToTab(Tabs.Main)
